Функция ВыполнитьЗадачиМногопоточноВФоне(Знач Задания,КоличествоПотоков=30) Экспорт
	
	Результат=ДополнитьТаблицуЗаданийСлужебнымиКолонками(Задания);
	
	Если КоличествоПотоков<1 или Задания.Количество()=0 Тогда
		Возврат Результат;
	КонецЕсли;	
	
	//Предварительная подготовка потоков
	Потоки=Новый Структура();
	Для Счетчик=0 По КоличествоПотоков-1 Цикл
		Потоки.Вставить("_"+Формат(Счетчик,"ЧН=0; ЧГ="),Результат.Скопировать(Новый Массив()));		
	КонецЦикла;	
	
	//Распределение задачь по потокам
	Для Счетчик=0 ПО Задания.Количество()-1 Цикл
		Задание=Потоки["_"+Формат(Счетчик%КоличествоПотоков,"ЧН=0; ЧГ=")].Добавить();
		ЗаполнитьЗначенияСвойств(Задание,Задания[Счетчик]);
	КонецЦикла;	
	
	
	Если ОграничениеФайловогоВарианта() Тогда
		
		//Запуск потоков
		ТаблицаФоновыхЗаданий=ПолучитьТаблицуФоновыхЗаданий();
		Для каждого Поток из Потоки Цикл
			НовоеФЗ=ТаблицаФоновыхЗаданий.Добавить();
			НовоеФЗ.АдресРезультата=ПоместитьВоВременноеХранилище(Неопределено);
			ПомощьникМногопоточность.ВыполнитьЗадачиВТекущемПотоке(Поток.Значение,НовоеФЗ.АдресРезультата);
		КонецЦикла;	
		
	Иначе	
		
		//Запуск потоков
		ТаблицаФоновыхЗаданий=ПолучитьТаблицуФоновыхЗаданий();
		Для каждого Поток из Потоки Цикл
			НовоеФЗ=ТаблицаФоновыхЗаданий.Добавить();
			НовоеФЗ.АдресРезультата=ПоместитьВоВременноеХранилище(Неопределено);
			лПараметры=Новый Массив();
			лПараметры.Добавить(Поток.Значение);
			лПараметры.Добавить(НовоеФЗ.АдресРезультата);
			НовоеФЗ.ФоновоеЗадание=ФоновыеЗадания.Выполнить("ПомощьникМногопоточность.ВыполнитьЗадачиВТекущемПотоке",лПараметры);
		КонецЦикла;	
		
		РезультатОжидания=ФоновыеЗадания.ОжидатьЗавершенияВыполнения(ТаблицаФоновыхЗаданий.ВыгрузитьКолонку("ФоновоеЗадание"),1);
		Пока ЕстьАктивныеЗадачи(РезультатОжидания) Цикл
			ТаблицаФоновыхЗаданий.ЗагрузитьКолонку(РезультатОжидания,"ФоновоеЗадание");
			РезультатОжидания=ФоновыеЗадания.ОжидатьЗавершенияВыполнения(ТаблицаФоновыхЗаданий.ВыгрузитьКолонку("ФоновоеЗадание"),1);
		КонецЦикла;	
		
	КонецЕсли;
	
	//Сбор результатов
	Для каждого Строка из ТаблицаФоновыхЗаданий Цикл
		лРезультатФЗ=ПолучитьИзВременногоХранилища(Строка.АдресРезультата);
		УдалитьИзВременногоХранилища(Строка.АдресРезультата);
		Попытка
			Для каждого РезультатВыполнения из лРезультатФЗ Цикл
				НайденнаяЗадача=Результат.НайтиСтроки(Новый Структура("УникальныйИдентификатор",РезультатВыполнения.УникальныйИдентификатор));
				Если НайденнаяЗадача.Количество()>0 Тогда
					ЗаполнитьЗначенияСвойств(НайденнаяЗадача[0],РезультатВыполнения);
				КонецЕсли;
			КонецЦикла;
		Исключение
			//Исключительная ситуация, необрабатываемая ошибка
		КонецПопытки
	КонецЦикла;	
	
	//Постоработка
	Для каждого строка из Результат Цикл
		Если строка.Успех=Неопределено Тогда
			строка.Успех=Ложь;
			строка.Описание="Неизвестная ошибка";
		КонецЕсли	
	КонецЦикла;	
	
	Возврат Результат
КонецФункции	

Функция ОграничениеФайловогоВарианта() Экспорт
	//Если мы уже находимся находимся внутри фонового задания и у нас файловый вариант мы не сможем запускать еще фоновых заданий
	Если ПолучитьТекущийСеансИнформационнойБазы().ИмяПриложения="BackgroundJob" и не ЭтоКлиентСервернаяБаза() Тогда
		Возврат Истина
	Иначе
		Возврат Ложь
	КонецЕсли;	
КонецФункции	

Функция ЭтоКлиентСервернаяБаза() Экспорт
	
	Возврат СтрНайти(ВРег(СтрокаСоединенияИнформационнойБазы()), "FILE=") = 0;
	
КонецФункции

Функция ВыполнитьЗадачиВТекущемПотоке(Знач Задания,Адрес=Неопределено,СообщатьПрогресс=Истина) Экспорт
	Сообщение=Новый СообщениеПользователю();
	Для каждого Задача из Задания Цикл 
		Если СообщатьПрогресс Тогда
			Сообщение.Текст=СтрШаблон("{""task"":""%1"",""action:""%2"",progress:%3}",Задача.УникальныйИдентификатор,"Запуск",Задания.Индекс(Задача)/Задания.Количество()*100);
			Сообщение.Сообщить();
		КонецЕсли;
		//Проверка имени метода на содержание спец символов которые могут использоваться для инъекций произвольного кода
		Если КорректноеИмяМетода(Задача.Метод) Тогда
			Попытка
				Задача.Успех=Истина;
				Задача.КоличествоПараметров=?(Задача.КоличествоПараметров=Неопределено,ОпределитьКоличествоПараметровМетода(Задача),Задача.КоличествоПараметров);
				лПараметрыМетода="";
				Для НомерПараметра=1 ПО Задача.КоличествоПараметров Цикл
					лПараметрыМетода=лПараметрыМетода+СтрШаблон("Задача.Параметр%1",НомерПараметра)+?(НомерПараметра<>Задача.КоличествоПараметров,",","");
				КонецЦикла;
				
				Если ЗначениеЗаполнено(Задача.ПараметрыСеанса) Тогда
					ЗаполнитьЗначенияСвойств(ПараметрыСеанса,Задача.ПараметрыСеанса);
				КонецЕсли;	
				
				Попытка
					//Выполнение как функции
					Выполнить("Задача.Результат="+Задача.Метод+"("+лПараметрыМетода+")");
				Исключение
					//Выполнение как процедуры
					Ошибка = ОписаниеОшибки();
					Если СтрНайти(Ошибка,"Обращение к процедуре как в функции")<>0 Тогда
						Выполнить(Задача.Метод+"("+лПараметрыМетода+")");
					Иначе
						ВызватьИсключение Ошибка; 
					КонецЕсли
				КонецПопытки;
			Исключение
				Задача.Успех=Ложь;
				Задача.Описание=ОписаниеОшибки();
			КонецПопытки;
		Иначе
			Задача.Успех=Ложь;
			Задача.Описание="Недопустиое имя метода";
		КонецЕсли;	
	КонецЦикла;
	Если Адрес<>Неопределено Тогда
		ПоместитьВоВременноеХранилище(Задания,Адрес);
	КонецЕсли;
КонецФункции	

Функция ОпределитьКоличествоПараметровМетода(Задача)
	Для Счетчик=-10 ПО -1 Цикл
		Если Задача[СтрШаблон("Параметр%1",-Счетчик)]<>Неопределено Тогда
			Возврат -Счетчик
		КонецЕсли;	
	КонецЦикла;
КонецФункции	

Функция КорректноеИмяМетода(ИмяМетода)
	Результат=Истина;
	Алфавит=СтрРазделить("а,б,в,г,д,е,ё,ж,з,и,й,к,л,м,н,о,п,р,с,т,у,ф,х,ц,ч,ш,щ,ъ,ы,ь,э,ю,я,_,0,1,2,3,4,5,6,7,8,9,10,.,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z",",");
	Для Счетчик=1 по СтрДлина(ИмяМетода) Цикл
		Если Алфавит.Найти(Нрег(Сред(ИмяМетода,Счетчик,1)))=Неопределено Тогда
			Результат=Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат
КонецФункции	

// Функция - Получить пустую таблицу заданий
// 
// Возвращаемое значение:
// Таблица значений  - Метод,Параметры
//
Функция ПолучитьПустуюТаблицуЗаданий() Экспорт
	ТЧ=Новый ТаблицаЗначений();
	ТЧ.Колонки.Добавить("Метод");
	ТЧ.Колонки.Добавить("Параметр1");
	ТЧ.Колонки.Добавить("Параметр2");
	ТЧ.Колонки.Добавить("Параметр3");
	ТЧ.Колонки.Добавить("Параметр4");
	ТЧ.Колонки.Добавить("Параметр5");
	ТЧ.Колонки.Добавить("Параметр6");
	ТЧ.Колонки.Добавить("Параметр7");
	ТЧ.Колонки.Добавить("Параметр8");
	ТЧ.Колонки.Добавить("Параметр9");
	ТЧ.Колонки.Добавить("Параметр10");
	ТЧ.Колонки.Добавить("ПараметрыСеанса");
	ТЧ.Колонки.Добавить("КоличествоПараметров");
	ТЧ.Колонки.Добавить("ДополнительныеДанные");
	Возврат ТЧ
КонецФункции	

Функция ДополнитьТаблицуЗаданийСлужебнымиКолонками(Знач Задания)
	Задания.Колонки.Добавить("ФоновоеЗадание");
	Задания.Колонки.Добавить("Успех");
	Задания.Колонки.Добавить("Описание");
	Задания.Колонки.Добавить("Результат");
	Задания.Колонки.Добавить("УникальныйИдентификатор");
	Для каждого строка из Задания Цикл
		строка.УникальныйИдентификатор=Новый УникальныйИдентификатор;
	КонецЦикла;
	Задания.Индексы.Добавить("УникальныйИдентификатор");
	Возврат Задания 
КонецФункции	

Функция ПолучитьТаблицуФоновыхЗаданий()
	ТЧ=Новый ТаблицаЗначений();
	ТЧ.Колонки.Добавить("ФоновоеЗадание");
	ТЧ.Колонки.Добавить("АдресРезультата");
	Возврат ТЧ; 
КонецФункции	                       	

Функция ЕстьАктивныеЗадачи(ФоновыеЗадания)
	Для каждого строка из ФоновыеЗадания цикл
		Если строка.Состояние=СостояниеФоновогоЗадания.Активно Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;	
	Возврат Ложь;
КонецФункции	

